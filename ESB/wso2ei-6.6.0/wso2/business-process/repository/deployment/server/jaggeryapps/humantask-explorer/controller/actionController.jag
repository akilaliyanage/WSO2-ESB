<%
/*
 * Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 * 
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

include ("/model/common.jag");

if (request.isSecure()) {//check whether the request is secure or not

    //initialize BPS HT service request creator
    var htRequest = require ('/js/WSHTRequest.js');
    htRequest.initHTServerInfo(BPSUrl, session.get('BPSSessionCookie'));

    var taskId = request.getParameter('tid');
    var actionType = request.getParameter('type');
    if (log.isDebugEnabled()) {
        log.debug('Task id : ' + taskId + '  Task action : ' + actionType);
    }

    var responseMsg;
    try {
        if (actionType === 'claim_task') {
            //claim specified task
            var result = new XML(htRequest.claimTask(taskId));

            var resultCheck = result.SOAPENV_NS::Body.NS2_NS::claimResponse;

            if (resultCheck.length() > 0) {
                //claiming success
                responseMsg = '<claim_taskResponse><success>true</success></claim_taskResponse>';
            } else {
                if(result == null || result == '') { // session timeout
                    if (log.isDebugEnabled()) {
                        log.debug('Session timed out for task'+ "" + taskId);
                    }
                    responseMsg = '<claim_taskResponse><success>timeout</success></claim_taskResponse>';
                }
                else {
                    //claiming unsuccessfull
                    responseMsg = '<claim_taskResponse><success>false</success></claim_taskResponse>';
                }
            }

            response.contentType = 'text/xml';
            response.content = responseMsg;

            /* SAMPLE RESPONSE ON FALIURE
             <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
               <soapenv:Body>
                  <soapenv:Fault>
                     <faultcode>soapenv:Server</faultcode>
                     <faultstring>The task[3507] already has an actual owner[[org.wso2.carbon.humantask.core.dao.jpa.openjpa.model.OrganizationalEntity@515152f5]]</faultstring>
                     <detail/>
                  </soapenv:Fault>
               </soapenv:Body>
            </soapenv:Envelope>

            SAMPLE RESPONSE ON SUCCESS
            <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
               <soapenv:Body>
                  <ns2:claimResponse xmlns:ns2="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803"/>
               </soapenv:Body>
            </soapenv:Envelope>
            */
        } else if (actionType === 'start_task') {

            var result =  new XML(htRequest.startTask(taskId));

            var resultCheck = result.SOAPENV_NS::Body.NS2_NS::startResponse;

            if (resultCheck.length() > 0) {
                //start successfull
                responseMsg = '<start_taskResponse><success>true</success></start_taskResponse>';
            } else {
                if(result == null || result == '') { // session timeout
                    if (log.isDebugEnabled()) {
                        log.debug('Session timed out for task'+ "" + taskId);
                    }
                    responseMsg = '<start_taskResponse><success>timeout</success></start_taskResponse>';
                }
                else {
                    //claiming unsuccessfull
                    responseMsg = '<start_taskResponse><success>false</success></start_taskResponse>';
                }
            }


            response.contentType = 'text/xml';
            response.content = responseMsg;

            /*SAMPLE RESPONSE ON SUCCESS
            <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
              <soapenv:Body>
                <ns2:startResponse xmlns:ns2="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803"/>
              </soapenv:Body>
            </soapenv:Envelope>

             SAMPLE RESPONSE ON FAILURE
            <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
              <soapenv:Body>
                <soapenv:Fault>
                  <faultcode>soapenv:Server</faultcode>
                  <faultstring>User[regionalClerkUser2] cannot perform [class org.wso2.carbon.humantask.core.engine.commands.Start] operation on task[3510] as the task is in state[IN_PROGRESS]. [class org.wso2.carbon.humantask.core.engine.commands.Start] operation can be performed only on tasks in [RESERVED] state</faultstring>
                  <detail/>
                </soapenv:Fault>
              </soapenv:Body>
            </soapenv:Envelope>
            */

        } else if (actionType === 'stop_task') {
            var result = new XML(htRequest.stopTask(taskId));
            var resultCheck = result.SOAPENV_NS::Body.NS2_NS::stopResponse;

            if (resultCheck.length() > 0) {
                //stop successfull
                responseMsg = '<stop_taskResponse><success>true</success></stop_taskResponse>';
            } else {
                if(result == null || result == '') { // session timeout
                    if (log.isDebugEnabled()) {
                        log.debug('Session timed out for task'+ "" + taskId);
                    }
                    responseMsg = '<stop_taskResponse><success>timeout</success></stop_taskResponse>';
                }
                else {
                    //stop unsuccessfull
                    responseMsg = '<stop_taskResponse><success>false</success></stop_taskResponse>';
                }
            }

            response.contentType = 'text/xml';
            response.content = responseMsg;

            /*
             * SAMPLE SUCCESS RESPONSE
             <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                   <soapenv:Body>
                      <ns2:stopResponse xmlns:ns2="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803"/>
                   </soapenv:Body>
                </soapenv:Envelope>

              SAMPLE FAILURE RESPONSE
               <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                   <soapenv:Body>
                      <soapenv:Fault>
                         <faultcode>soapenv:Server</faultcode>
                         <faultstring>User[regionalClerkUser2] cannot [Stop] task[id:3512] as the task is in state[RESERVED]. [Stop] operation can be performed on tasks in state[IN_PROGRESS]!</faultstring>
                         <detail/>
                      </soapenv:Fault>
                   </soapenv:Body>
                </soapenv:Envelope>
                */

        } else if (actionType === 'release_task') {
            var result = new XML(htRequest.releaseTask(taskId));
            var resultCheck = result.SOAPENV_NS::Body.NS2_NS::releaseResponse;

            if (resultCheck.length() > 0) {
                //start successfull
                responseMsg = '<release_taskResponse><success>true</success></release_taskResponse>';
            } else {
                if(result == null || result == '') { // session timeout
                    if (log.isDebugEnabled()) {
                        log.debug('Session timed out for task'+ "" + taskId);
                    }
                    responseMsg = '<release_taskResponse><success>timeout</success></release_taskResponse>';
                }
                else {
                    //start unsuccessfull
                    responseMsg = '<release_taskResponse><success>false</success></release_taskResponse>';
                }
            }

            response.contentType = 'text/xml';
            response.content = responseMsg;

            /*
             * SAMPLE SUCCESS RESPONSE
                <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                   <soapenv:Body>
                      <ns2:releaseResponse xmlns:ns2="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803"/>
                   </soapenv:Body>
                </soapenv:Envelope>

                SAMPLE FAILURE RESPONSE
                <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                   <soapenv:Body>
                      <soapenv:Fault>
                         <faultcode>soapenv:Server</faultcode>
                         <faultstring>Access Denied. You are not authorized to perform this task</faultstring>
                         <detail/>
                      </soapenv:Fault>
                   </soapenv:Body>
                </soapenv:Envelope>

            */

        } else if (actionType === 'suspend_task') {
            var result = new XML(htRequest.suspendTask(taskId));
            var resultCheck = result.SOAPENV_NS::Body.NS2_NS::suspendResponse;

            if (resultCheck.length() > 0) {
                //start successfull
                responseMsg = '<suspend_taskResponse><success>true</success></suspend_taskResponse>';
            } else {
                if(result == null || result == '') { // session timeout
                    if (log.isDebugEnabled()) {
                        log.debug('Session timed out for task'+ "" + taskId);
                    }
                    responseMsg = '<suspend_taskResponse><success>timeout</success></suspend_taskResponse>';
                }
                else {
                    //start unsuccessfull
                    responseMsg = '<suspend_taskResponse><success>false</success></suspend_taskResponse>';
                }
            }

            response.contentType = 'text/xml';
            response.content = responseMsg;

            /*
                SAMPLE SUCCESS RESPONSE
                <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                   <soapenv:Body>
                      <ns2:suspendResponse xmlns:ns2="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803"/>
                   </soapenv:Body>
                </soapenv:Envelope>

                SAMPLE FAILURE RESPONSE
                <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                   <soapenv:Body>
                      <soapenv:Fault>
                         <faultcode>soapenv:Server</faultcode>
                         <faultstring>User[regionalClerkUser2] cannot perform [class org.wso2.carbon.humantask.core.engine.commands.Suspend] operation on task[3506] as the task is in state[SUSPENDED]. [class org.wso2.carbon.humantask.core.engine.commands.Suspend] operation can be performed only on tasks in states[RESERVED,READY,IN_PROGRESS]</faultstring>
                         <detail/>
                      </soapenv:Fault>
                   </soapenv:Body>
                </soapenv:Envelope>
            */

        } else if (actionType === 'resume_task') {
            var result = new XML(htRequest.resumeTask(taskId));
            var resultCheck = result.SOAPENV_NS::Body.NS2_NS::resumeResponse;

            if (resultCheck.length() > 0) {
                //start successfull
                responseMsg = '<resume_taskResponse><success>true</success></resume_taskResponse>';
            } else {
                if(result == null || result == '') { // session timeout
                    if (log.isDebugEnabled()) {
                        log.debug('Session timed out for task'+ "" + taskId);
                    }
                    responseMsg = '<resume_taskResponse><success>timeout</success></resume_taskResponse>';
                }else {
                    //start unsuccessfull
                    responseMsg = '<resume_taskResponse><success>false</success></resume_taskResponse>';
                }
            }

            response.contentType = 'text/xml';
            response.content = responseMsg;

            /*
            SUCCESS RESPONSE
                <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                   <soapenv:Body>
                      <ns2:resumeResponse xmlns:ns2="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803"/>
                   </soapenv:Body>
                </soapenv:Envelope>

            SAMPLE FAILURE RESPONSE
                <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                   <soapenv:Body>
                      <soapenv:Fault>
                         <faultcode>soapenv:Server</faultcode>
                         <faultstring>User[regionalClerkUser2] cannot [class org.wso2.carbon.humantask.core.engine.commands.Resume] task[3506] as the task is in state[IN_PROGRESS]. Only tasks in [SUSPENDED] state can be resumed!</faultstring>
                         <detail/>
                      </soapenv:Fault>
                   </soapenv:Body>
                </soapenv:Envelope>
            */
        } else if (actionType === 'fail_task') {
            var result = new XML(htRequest.failTask(taskId));
            var resultCheck = result.SOAPENV_NS::Body.NS2_NS::failResponse;

            if (resultCheck.length() > 0) {
                //start successfull
                responseMsg = '<fail_taskResponse><success>true</success></fail_taskResponse>';
            } else {
                if(result == null || result == '') { // session timeout
                    if (log.isDebugEnabled()) {
                        log.debug('Session timed out for task'+ "" + taskId);
                    }
                    responseMsg = '<fail_taskResponse><success>timeout</success></fail_taskResponse>';
                }
                else {
                    //start unsuccessfull
                    responseMsg = '<fail_taskResponse><success>false</success></fail_taskResponse>';
                }
            }

            response.contentType = 'text/xml';
            response.content = responseMsg;

            /*
             * SAMPLE SUCCESS RESPONSE
                <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                   <soapenv:Body>
                      <ns2:failResponse xmlns:ns2="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803"/>
                   </soapenv:Body>
                </soapenv:Envelope>

               SAMPLE FAILURE RESPONSE
               <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                   <soapenv:Body>
                      <soapenv:Fault>
                         <faultcode>soapenv:Server</faultcode>
                         <faultstring>User[regionalClerkUser2] cannot [Fail] task[id:3511] as the task is in state[FAILED]. [Fail] operation can be performed on tasks in state[IN_PROGRESS]!</faultstring>
                         <detail/>
                      </soapenv:Fault>
                   </soapenv:Body>
                </soapenv:Envelope>

            */
        } else if (actionType === "addComment_task") {
            //format of request : <addComment><text>Comment</text></addComment>
            //the Comment contains text data wrapped by <![CDATA[ text content ]]
            var requestPayload = XML(request.getContent());

            //need to rewrap text content by CDATA
            var result = new XML(htRequest.addComment(taskId, '<![CDATA[' +requestPayload.text +']]>'));
            var resultCheck = result.SOAPENV_NS::Body.NS2_NS::addCommentResponse;

            if (resultCheck.length() > 0) {
                //start successfull
                responseMsg = '<addComment_taskResponse><success>true</success></addComment_taskResponse>';
            } else {
                if(result == null || result == '') { // session timeout
                    if (log.isDebugEnabled()) {
                        log.debug('Session timed out for task'+ "" + taskId);
                    }
                    responseMsg = '<addComment_taskResponse><success>timeout</success></addComment_taskResponse>';
                }else {
                    //start unsuccessfull
                    responseMsg = '<addComment_taskResponse><success>false</success></addComment_taskResponse>';
                }
            }

            response.contentType = 'text/xml';
            response.content = responseMsg;

            /*
                 SAMPLE SUCCESS RESPONSE
                 <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                       <soapenv:Body>
                          <ns2:addCommentResponse xmlns:ns2="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803">
                             <ns2:commentID>11051</ns2:commentID>
                          </ns2:addCommentResponse>
                       </soapenv:Body>
                 </soapenv:Envelope>

                SAMPLE FAILED RESPONSE
                <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                   <soapenv:Body>
                      <soapenv:Fault>
                         <faultcode>soapenv:Server</faultcode>
                         <faultstring>Task lookup failed for task id 825 invalid task id provide</faultstring>
                         <detail/>
                      </soapenv:Fault>
                   </soapenv:Body>
                </soapenv:Envelope>
             */
        } else if (actionType === "deleteComment") {
            var result = new XML(htRequest.deleteComment(taskId, request.getParameter('commentId')));
            var resultCheck = result.SOAPENV_NS::Body.NS2_NS::deleteCommentResponse;

            if (resultCheck.length() > 0) {
                //start successfull
                responseMsg = '<deleteComment_Response><success>true</success></deleteComment_Response>';
            } else {
                if(result == null || result == '') { // session timeout
                    if (log.isDebugEnabled()) {
                        log.debug('Session timed out for task'+ "" + taskId);
                    }
                    responseMsg = '<deleteComment_taskResponse><success>timeout</success></deleteComment_taskResponse>';
                }else {
                    //start unsuccessfull
                    responseMsg = '<deleteComment_Response><success>false</success></deleteComment_Response>';
                }
            }

            response.contentType = 'text/xml';
            response.content = responseMsg;

            /* SAMPLE SUCCESS :
                <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                   <soapenv:Body>
                      <ns2:deleteCommentResponse xmlns:ns2="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803"/>
                   </soapenv:Body>
                </soapenv:Envelope>
            */

        } else if (actionType === "assign_task") {
            var userName = request.getParameter('assignee');
            var result = new XML(htRequest.assignTask(taskId, userName));
            var resultCheck = result.SOAPENV_NS::Body.NS2_NS::delegateResponse;

            if (resultCheck.length() > 0) {
                //comment retrieval success
                responseMsg =  '<assign_taskResponse>\
                                    <success>true</success>\
                                </assign_taskResponse>';
            }

                else {
                    responseMsg = '<assign_taskResponse>\
                                    <success>false</success>\
                                    <data>' + result.SOAPENV_NS::Body + '</data>\
                                </assign_taskResponse>';
                }


            response.contentType = 'text/xml';
            response.content = responseMsg;

            /*
             * SAMPLE SUCCESS:
                <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                   <soapenv:Body>
                      <ns2:delegateResponse xmlns:ns2="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803"/>
                   </soapenv:Body>
                </soapenv:Envelope>
             * SAMPLE FAILURE:
                 <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                   <soapenv:Body>
                      <soapenv:Fault>
                         <faultcode>soapenv:Server</faultcode>
                         <faultstring>The task[id:3507] can be only delegated after it's released. But for the task to be released you need to be a business administrator or the actual owner of the task. Given user[regionalClerkUser2] is not in those roles!</faultstring>
                         <detail/>
                      </soapenv:Fault>
                   </soapenv:Body>
                </soapenv:Envelope>
            */

        } else if ( actionType === "set_priority" ) {
            var priority = request.getParameter('priority');
            var result = new XML(htRequest.setPriority(taskId, priority));
            var resultCheck = result.SOAPENV_NS::Body.NS2_NS::setPriorityResponse;

            if (resultCheck.length() > 0) {
                //setting new priority success
                responseMsg =  '<set_priorityResponse>\
                                    <success>true</success>\
                                </set_priorityResponse>';
            } else {
                responseMsg = '<set_priorityResponse>\
                                    <success>false</success>\
                                    <data>' + result.SOAPENV_NS::Body + '</data>\
                                </set_priorityResponse>';
            }
            response.contentType = 'text/xml';
            response.content = responseMsg;

            /*
             * SAMPLE SUCCESS:
             <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
             <soapenv:Body>
             <ns2:setPriorityResponse xmlns:ns2="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803"/>
             </soapenv:Body>
             </soapenv:Envelope>
             */

        } else if (actionType === 'skip_task') {
            var result = new XML(htRequest.skipTask(taskId));
            var resultCheck = result.SOAPENV_NS::Body.NS2_NS::skipResponse;

            if (resultCheck.length() > 0) { //skip successfull
                responseMsg = '<skip_taskResponse><success>true</success></skip_taskResponse>';
            } else {
                if(result == null || result == '') { // session timeout
                    if (log.isDebugEnabled()) {
                        log.debug('Session timed out for task'+ "" + taskId);
                    }
                    responseMsg = '<skip_taskResponse><success>timeout</success></skip_taskResponse>';
                } else { //skip unsuccessfull
                    responseMsg = '<skip_taskResponse><success>false</success></skip_taskResponse>';
                }
            }

            response.contentType = 'text/xml';
            response.content = responseMsg;

            /*
             * SAMPLE SUCCESS RESPONSE
             <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
             <soapenv:Body>
             <ns2:skipResponse xmlns:ns2="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803"/>
             </soapenv:Body>
             </soapenv:Envelope>

             SAMPLE FAILURE RESPONSE
             <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
             <soapenv:Body>
             <soapenv:Fault>
             <faultcode>soapenv:Server</faultcode>
             <faultstring>The task[id:4207] is not a skippable task.</faultstring>
             <detail/>
             </soapenv:Fault>
             </soapenv:Body>
             </soapenv:Envelope>
             */

        } else if (actionType === 'remove_notification') {
            var result = new XML(htRequest.removeNotification(taskId));
            var resultCheck = result.SOAPENV_NS::Body.NS2_NS::removeResponse;

            if (resultCheck.length() > 0) { //request successfull
                responseMsg = '<remove_notificationResponse><success>true</success></remove_notificationResponse>';
            } else {
                if(result == null || result == '') { // session timeout
                    if (log.isDebugEnabled()) {
                        log.debug('Session timed out for notificaation'+ "" + taskId);
                    }
                    responseMsg = '<remove_notificationResponse><success>timeout</success></remove_notificationResponse>';
                } else { //skip unsuccessfull
                    responseMsg = '<remove_notificationResponse><success>false</success></remove_notificationResponse>';
                }
            }

            response.contentType = 'text/xml';
            response.content = responseMsg;

            /*
             * SAMPLE SUCCESS RESPONSE
             <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
             <soapenv:Body>
             <ns2:removeResponse xmlns:ns2="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803"/>
             </soapenv:Body>
             </soapenv:Envelope>
             */

        } else {
            responseMsg = '<unknownTaskResponse>\
                                <success>false</success>\
                                <data>unknon task</data>\
                            </unknownTaskResponse>';
            response.contentType = 'text/xml';
            response.content = responseMsg;
        }
    } catch(e) {
        log.error('Error occured while connecting to the back-end BPS HumanTaskClientAPIAdmin service : ');
        log.error(e);
        var responseMsg = '<fault_taskResponse>\
                                <success>false</success>\
                                <data>' + e.message + '</data>\
                            </fault_taskResponse>';
        response.contentType = 'text/xml';
        response.content = responseMsg;
    }

} else {
    //request is not secured, therefore need redirect to the secure channel
    responseMsg = '<actionTaskResponse>\
                      <success>false</success>\
                      <data>Unsecure request, use https</data>\
                  </actionTaskResponse>';
    response.contentType = 'text/xml';
    response.status = 500;
    response.content = responseMsg;
}

%>