<%
/*
 * Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 * 
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

    var log = new Log();

    //initialize BPS HT service request creator
    var htRequest = require ('/js/WSHTRequest.js');
    htRequest.initHTServerInfo(BPSUrl, session.get('BPSSessionCookie'));

    //retrieving parameters getAllParameter to json obj
    var requestParameters = request.getAllParameters();

    var paginationStr = requestParameters.pagination;
    if (paginationStr == null || paginationStr === "") {
        var pagination = 1;//1st page
    } else {
        var pagination = parseInt(paginationStr);
    }

    var statusQuery = requestParameters.status_query;
    if (statusQuery == null) {
        statusQuery = "RESERVED";
    }

    var pageSize = 10;
    var pageNumber = pagination - 1;
    var queryOrder = 'DESCENDING';
    var queryOrderBy = 'CREATED_DATE';
    var queryCategory = 'ASSIGNED_TO_ME';

    try {
        var taskXMLList = null;
        var paginatePageCount = 0;
        var BPSResponseXML = new XML(htRequest.simpleQueryBasic(statusQuery, pageSize, pageNumber, queryCategory,
                                                                                        queryOrder, queryOrderBy));
       if(BPSResponseXML == null || BPSResponseXML == ""){
           if (log.isDebugEnabled()) {
               log.debug('Session timed out for request' + htRequest);
           }
           session.put('authSuccess', false);
           response.sendRedirect('login');
       }
        if (log.isDebugEnabled()) {
            log.debug('BPS RESPONSE : ' + BPSResponseXML);
        }

        /*
         * Expected Sample response
         *
        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
          <soapenv:Body>
            <ns2:simpleQueryResponse xmlns:ns2="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803">
              <ns2:taskSimpleQueryResultSet>
                <row xmlns="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/types/200803">
                  <id>454</id>
                  <taskType>TASK</taskType>
                  <name xmlns:s80="http://www.example.com">s80:ApproveClaim</name>
                  <presentationSubject>Approve the insurance claim for â‚¬5000.0 on behalf of milinda Perera</presentationSubject>
                  <presentationName>Approve Claim</presentationName>
                  <status>RESERVED</status>
                  <priority>2</priority>
                  <createdTime>2014-07-30T16:07:43.242+05:30</createdTime>
                </row>
                <ns1:pages xmlns:ns1="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/types/200803">1</ns1:pages>
              </ns2:taskSimpleQueryResultSet>
            </ns2:simpleQueryResponse>
          </soapenv:Body>
        </soapenv:Envelope>
        */

        taskXMLList = BPSResponseXML..SOAPENV_NS::Body.NS2_NS::simpleQueryResponse.NS2_NS::taskSimpleQueryResultSet.NS1_NS::row;
        paginatePageCount =  parseInt(BPSResponseXML..SOAPENV_NS::Body.NS2_NS::simpleQueryResponse
                                                                        .NS2_NS::taskSimpleQueryResultSet.NS1_NS::pages);
    } catch(e) {
        log.error('Error occurred while connecting to the back-end BPS HumanTaskClientAPIAdmin service : ');
        log.error(e);
        session.put('authSuccess', false);
        response.sendRedirect('login');
    }
    
    //Set current active veiw as myTasks. 
    //This is used to highlight current view which the user currently viewing in the navigation bar
    myTasksNavActive = 'class="active"';


%>