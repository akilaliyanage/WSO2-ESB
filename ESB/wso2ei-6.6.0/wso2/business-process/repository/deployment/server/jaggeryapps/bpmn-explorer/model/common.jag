<%
/*<!--
 ~ Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~ Licensed under the Apache License, Version 2.0 (the "License");
 ~ you may not use this file except in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~      http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing, software
 ~ distributed under the License is distributed on an "AS IS" BASIS,
 ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ~ See the License for the specific language governing permissions and
 ~ limitations under the License.
 -->*/

var log = new Log();
var encoder = require("/assets/encoder.js"),
        process = require('process'),
        auth = session.get('auth'),
        roles = session.get('roles');
var carbon = require('carbon');
var i18n = require("i18n");
var localeResourcesBasePath ="../config/locales/";
i18n.init(request,localeResourcesBasePath);
// Encoder to handle xss attacks
var Encode = Packages.org.owasp.encoder.Encode;


var data = application.get('appConfig');
var bpsHost = application.get('bpsHost');
var bpsPort = application.get('bpsPort');
// httpUrl is used for the bpmn rest API
var httpUrl = application.get('httpUrl');

var httpServiceUrl = application.get('httpServiceUrl');

var bpsTenantID = application.get('bpsTenantID');
var bpsTenantDomain = application.get('bpsTenantDomain');
//bpsTenantUrlPart is used for the bpmn rest API
var bpsTenantUrlPart = application.get('bpsTenantUrlPart'); //this holds the tenant part of the bps url
//bpsTenantServiceUrl is used  as the service Url
var bpsTenantServiceUrl = application.get('bpsTenantServiceUrl');

var bpsSubstitutionFeatureEN = application.get('bpsSubstitutionFeatureEN');//variable that holds the status of 
                                                                            //the substitution feature

if (httpUrl == null || httpUrl === "") {

    appConfig = require('../config/config.json');
    application.put('appConfig', appConfig);

    //Retrieve configuration
    bpsHost = appConfig.server.bpsHost;
    bpsPort = appConfig.server.bpsPort;
    bpsTenantID = appConfig.server.bpsTenantId;
    bpsTenantDomain = appConfig.server.bpsTenantDomain;
    data = appConfig;

    if(bpsHost == null || bpsHost === "" || bpsPort == null || bpsPort === "") {
        //retrieve host name and the port from the deployed server assuming it's a BPS
        log.info('Starting BPMN-explorer in default configuration');
        var process = require("process");
        var NetworkUtils = Packages.org.wso2.carbon.utils.NetworkUtils;
        bpsHost = NetworkUtils.getLocalHostname();
        bpsPort = process.getProperty('mgt.transport.https.port');
    }

    if (bpsTenantDomain.length > 0) {
        //Used for the REST api
        bpsTenantUrlPart = "/t/" + bpsTenantDomain + "/webapps";
        bpsTenantServiceUrl = "/t/" + bpsTenantDomain;
    } else {
        bpsTenantUrlPart = "";
        bpsTenantServiceUrl = "";
    }

    application.put('bpsTenantUrlPart', bpsTenantUrlPart);
    application.put('bpsTenantDomain', bpsTenantDomain);
    application.put('bpsTenantServiceUrl',bpsTenantServiceUrl);

    if (bpsTenantID.length > 0) {
        application.put('bpsTenantID', bpsTenantID);
    } else {
        //assume super tenant
        bpsTenantID = '-1234';
        application.put('bpsTenantID', bpsTenantID);

    }

    //retrieve explorer deployed server
    var carbon = require('carbon');
    var serverAddress = carbon.server.address('https');


    httpUrl = "https://"+ bpsHost+ ":"+ bpsPort + bpsTenantUrlPart;
    application.put('httpUrl', httpUrl);
    application.put('bpsHost', bpsHost);
    application.put('bpsPort', bpsPort);
    application.put('serverAddress', serverAddress);

    httpServiceUrl = "https://"+ bpsHost+ ":"+ bpsPort + bpsTenantServiceUrl;
    application.put('httpServiceUrl', httpServiceUrl);



    if(log.isDebugEnabled()) {
        log.info("BPS server host : " + bpsHost);
        log.info("BPS server port : " + bpsPort);
        log.info("BPS server bpsTenantID : " + bpsTenantID);
        log.info("BPS server bpsTenantDomain : " + bpsTenantDomain);
    }

}

if(log.isDebugEnabled()) {
    log.debug("BPS URL:"+ httpUrl);
}

//check BPS Features (eg: Substitution feature) status only for the first user login
if (bpsSubstitutionFeatureEN == null && session.get('user') != null && session.get('authSuccess') != null && session.get('authSuccess') == true) {
    //first most user loging to the bpmn webapp
    var headers =   {
                    "Authorization": "Basic " + auth,
                    "Contentnt-Type": "application/json",
                    "Accept" : "application/json"
                };
    var RUNTIME_SUBSTITUTES_CONF_URL = "/bpmn/runtime/substitutes/configs/enabled";
    httpResponse = get(httpUrl+ RUNTIME_SUBSTITUTES_CONF_URL, null, headers, "json");

    if (log.isDebugEnabled()) {
        log.debug("BPS BPMN REST API request: " + httpUrl+ RUNTIME_SUBSTITUTES_CONF_URL);
        log.debug("BPS BPMN REST API response: " + stringify(httpResponse));
    }

    if (parseInt(httpResponse.xhr.status) == 200 && httpResponse.data != null) {
        var configStatusInfo = httpResponse.data;
        //Check for error response
        if (configStatusInfo.enabled != undefined) {
            if (configStatusInfo.enabled == true) {
                bpsSubstitutionFeatureEN = true;
                log.info ("BPS Substitution Feature Status : Enabled");
                application.put("bpsSubstitutionFeatureEN", bpsSubstitutionFeatureEN);
            } else {
                bpsSubstitutionFeatureEN = false;
                log.info ("BPS Substitution Feature Status : Disabled");
                application.put("bpsSubstitutionFeatureEN", bpsSubstitutionFeatureEN);
            }
        } else {
            if (configStatusInfo.errorMessage != undefined) {
                log.error("BPS Features status check failed : " + configStatusInfo.errorMessage);
            } else {
                log.error("BPS Features status check failed : " + parseInt(httpResponse.xhr.status));
            }
            //Error occurred hence assume substitution feature disabled and not updating application variable
            bpsSubstitutionFeatureEN = false;
        }
    } else {
        if (log.isDebugEnabled()) {
            log.debug("User substitutions not available");
        }
    }
}

//Following variable were used to highlight current page which user is currently in.
//these were set as 'active' at each corresponding task Model
var dashboardNavActive = ''; //Dashboard veiw [updated at statsModel and refered at navigation.jag]
var myTasksNavActive = ''; //My Tasks veiw [updated at myTasksModel, refered at navigation.jag]
var claimableTasksNavActive = ''; //Claimable Tasks view [updated at claimableTaskModel, refered at navigation.jag]
var substitutionNavActive = ''; //Task substitution view [updated at substitutionModel, refered at navigation.jag]
var completedTasksNavActive = ''; // Completed task view [updated at historicTasksModel, refered at navigation.jag]
var processesNavActive = ''; // Processes view [updated at myTasksModel, refered at navigation.jag]
var searchNavActive = ''; // Search view [updated at searchModel, refered at navigation.jag]
var reportNavActive = ''; //Report view [updated at reportModel and refered at navigation.jag]
var processMonitoringNavActive = ''; //Process Monitoring view [updated at processMonitoringModel and refered at navigation.jag]
var advancedFilterNavActive = ''; //Advanced Filtering view [updated at advancedFilteringModel and refered at navigation.jag]

var taskMenuNavActive = ''; //Task Menu tab selection [updated at myTasksModel, claimableTaskModel, historicTasksModel  and refered at navigation.jag]
var monitoringMenuNavActive = ''; //Monitoring Menu tab selection [updated at processMonitoringModel, advancedFilteringModel, and refered at navigation.jag]

var errorDisplayEnable = 'hidden'; //This variable is used to display #commonErrorSection section in each view
                                    // errorDisplayEnable = '' to display
var errorDisplayBackButtonsEnable = 'hidden'; //This variable is used to display back and home buttons #commonErrorSection 
                                                //section in each view. errorDisplayBackButtonsEnable='' to display 
var commonErrorMessage = null; //Common error message if exists

//Common Constants
var SUBSTITUTION_PERMISSION_PATH = "/permission/admin/manage/bpmn/substitute";
var BPMN_PERMISSION_PATH = "/permission/admin/manage/bpmn";
var ADMIN_PERMISSION_PATH = "/permission/admin";
var ROOT_PERMISSION_PATH = "/permission";


//Common HTTP response headers
response.addHeader('X-XSS-Protection', '1; mode=block');//Enable Web Browser XSS Protection


//START COMMON FUNCTIONS

/**
 * Function to get common error message display content
 */
function getCommonErrorContent (errorMsg) {
    return errorMsg   + '<br><br> <div align="right">'
            + ' <button class="btn btn-info" onclick="window.history.back();">&lt;&lt; Go back to previous page</button> '
            + ' <a class="btn btn-info" href="stats">Go to home</a></div>';
}

function epochToFormattedTime (epochTime) {
    if (epochTime == null) {
        return i18n.localize("not.available","Not available")
    }
    var time = new Date(epochTime);
    return time.getFullYear() + '-' + (time.getMonth() + 1) + '-' + time.getDate() + ' ' + time.toLocaleTimeString();
}

function epochToVisualFormattedTime (epochTime) {
    var time = new Date(epochTime);
    return time;
}
%>
