<%
/*
 * Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

include ("/model/common.jag");

if (request.isSecure()) {//check whether the request is secure or not
    var username = request.getParameter("username");
    var password = request.getParameter("password");
    var requestUrl = request.getHeader("Referer").split("requestUrl=")[1];
    var authSuccess = false;
    if(requestUrl != null && requestUrl != "null"){
        requestUrl = requestUrl.replace("%3F", "?");
    }
    if(requestUrl == null || requestUrl == "null" || requestUrl == ""){
        requestUrl = "mytasks";
    }
    if (username === "" || password === "") {
        authSuccess = false;
    } else {

        var carbon = require('carbon');
        var userTenantInfo = carbon.server.tenantUser(username);

        if (userTenantInfo.domain == carbon.server.tenantDomain() && userTenantInfo.tenantId == carbon.server.tenantId()) {

            try {
                authSuccess = HTTPAuthenticate(username, password, 'localhost');
            } catch (e) {
                log.error('Error occured while connecting to the back-end BPS AuthenticationAdmin service : ');
                log.error(e);
                authSuccess = false;
            }

        }
    }
    if (!authSuccess) {
        session.put("loginFailed" ,true);
        response.sendRedirect(requestUrl);
    } else {
        var cookie = session.get('BPSSessionCookie');
        var mgtCookie = session.get('mgtCookie');
        // renew session to prevent session hijacking
         if (typeof request.getSession == "function") {
             if (session && !session.isNew()) {
                 session.invalidate();
             }
            session = request.getSession(true);
          }
        session.put('authSuccess', authSuccess);
        session.put('userName', username);
        session.put('BPSSessionCookie', cookie);
        session.put('mgtCookie', mgtCookie);
        response.addHeader('Set-Cookie', mgtCookie + '; Path=/; Secure; HttpOnly;');
        response.sendRedirect(requestUrl);
    }

} else {
    //request is not secured, therefore need redirect to the secure channel
    var queryStr = '';
    if (request.getQueryString() != null) {
        queryStr = '?' + request.getQueryString();
    }
    response.sendRedirect(application.get('serverAddress') + request.getRequestURI() + queryStr);
}

    /**
     * function to make login request to AuthenticationAdmin
     * @param username username of user
     * @param password password of user
     * @param remoteAddr target url
     * @return true if success otherwise false
     */
    function HTTPAuthenticate(username, password, remoteAddr) {

        var httpAuth = new XMLHttpRequest();
        var endPoint = BPSUrl + '/services/AuthenticationAdmin.AuthenticationAdminHttpsSoap11Endpoint/';

        httpAuth.open('POST', endPoint, false);
        httpAuth.setRequestHeader('SOAPAction', 'urn:login');
        httpAuth.setRequestHeader('Content-Type','text/xml');

        var payload = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:aut="http://authentication.services.core.carbon.wso2.org">\
                            <soapenv:Header/>\
                                <soapenv:Body>\
                                    <aut:login>\
                                        <aut:username>' +username +'</aut:username>\
                                        <aut:password>' +password +'</aut:password>\
                                        <aut:remoteAddress>' +remoteAddr +'</aut:remoteAddress>\
                                    </aut:login>\
                            </soapenv:Body>\
                        </soapenv:Envelope>';


        httpAuth.send(payload);
        var BPSResponse = httpAuth.responseText;
        if (log.isDebugEnabled()) {
            log.debug('Login RESPONSE:' + httpAuth.responseText);
        }

        var returnStart = BPSResponse.indexOf('<ns:return>') + '<ns:return>'.length;
        var returnEnd = BPSResponse.indexOf('</ns:return>');
        var isLoginSuccess = BPSResponse.substring(returnStart, returnEnd);

        if (log.isDebugEnabled()) {
            log.debug('Login Success:' + isLoginSuccess);
        }

        if (isLoginSuccess === 'true') {
            //retrieve session cookie with BPS and store in session
            var cookie = httpAuth.getResponseHeader('Set-Cookie').split(';')[0];
            session.put('BPSSessionCookie' , cookie);

            //authenticate again via managment console login. Required for attachment handling
            /*
            * TODO : Disabled Attachment authentication till we fix Jaggery CXRF issues. (JIRA :
            * https://wso2.org/jira/browse/BPS-1058 )
            */
            var mgtCookie = cookie; // AuthenticateForAttachment(username, password);
            if (mgtCookie == null) {
                //AuthenticateForAttachment failed therefore overall authentication marked as failed
                session.remove('BPSSessionCookie');
                return false;
            }
            session.put("mgtCookie", mgtCookie);
            response.addHeader('Set-Cookie', mgtCookie + '; Path=/; Secure; HttpOnly;');
            return true;
        } else {
            if (log.isDebugEnabled()) {
                log.debug('Login in to BPS Failed');
            }
            return false;
        }

    }

    /**
    * Authenticate via managment console
    * @param username username of user
    * @param password password of user
    * @return session cookie from response
    */
    function AuthenticateForAttachment(userName, password) {

        var endPoint = application.get('hostServer') + '/carbon/admin/login_action.jsp'
        var mgtAuth = new XMLHttpRequest();

        mgtAuth.open('POST', endPoint, false);
        mgtAuth.setRequestHeader('Content-Type','application/x-www-form-urlencoded');

        var payload = 'username=' + userName + '&password=' + password;

        mgtAuth.send(payload);

        if (log.isDebugEnabled()) {
            log.debug('Login via Mgt Console RESPONSE:' + mgtAuth.status + ' - ' + mgtAuth.statusText);
            log.debug("Redirection Location : " + mgtAuth.getResponseHeader("Location"));
            log.debug("Login status : " + mgtAuth.getResponseHeader("Location").split('loginStatus=')[1]);
        }

        if (mgtAuth.getResponseHeader("Location").split('loginStatus=')[1] === "true"){
            log.debug("/carbon/admin/login_action.jsp login success");
            return mgtAuth.getResponseHeader('Set-Cookie');
        }

        return null;
    }
%>
