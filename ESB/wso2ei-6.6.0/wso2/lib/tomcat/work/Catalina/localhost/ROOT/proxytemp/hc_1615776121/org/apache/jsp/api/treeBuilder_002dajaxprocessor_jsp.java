/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.22
 * Generated at: 2021-05-20 06:50:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.api;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import org.wso2.carbon.rest.api.stub.types.carbon.ResourceData;
import java.util.List;

public final class treeBuilder_002dajaxprocessor_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/tlds/carbontags.tld", Long.valueOf(1574397812000L));
    _jspx_dependants.put("/WEB-INF/tlds/fmt.tld", Long.valueOf(1574397812000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.wso2.carbon.rest.api.stub.types.carbon.ResourceData");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	List<ResourceData> resourceList =
			(ArrayList<ResourceData>)session.getAttribute("apiResources");

    boolean isResourceUpdatePending = false;
    String rIndex = request.getParameter("updatePending");
    if(rIndex.equals("true")) {
        isResourceUpdatePending = true;
    } else {
        isResourceUpdatePending = false;
    }

    boolean generateMode = "generate".equals(request.getParameter("mode"));

      out.write("\r\n");
      out.write("\r\n");
      out.write("<div id=\"treeColapser\"\r\n");
      out.write("\t class=\"minus-icon\"\r\n");
      out.write("     onclick=\"treeColapse(this)\">\r\n");
      out.write("</div>\r\n");
      out.write("<div id=\"api.root\" class=\"resources\">\r\n");
      out.write("    <a class=\"root-endpoint\">Root</a>\r\n");
      out.write("\r\n");
      out.write("    ");
 if (!generateMode) {
      out.write("\r\n");
      out.write("    <div class=\"sequenceToolbar\"\r\n");
      out.write("         style=\"width:100px;\" onclick=\"addResource()\">\r\n");
      out.write("        <div>\r\n");
      out.write("            <a class=\"addChildStyle\">Add Resource</a>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    ");
 } 
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");

	for(int i=0; i<resourceList.size(); i++){
      out.write("\r\n");
      out.write("\t\t<div id=\"");
      out.print("branch." + i);
      out.write("\" class=\"branch-node\"></div>\r\n");
      out.write("\t\t<ul id=\"");
      out.print("ul." + i);
      out.write("\" class=\"child-list\"> \r\n");
      out.write("\t  \t<li>\r\n");
      out.write("\t\t\t<div class=\"dot-icon\"></div>\r\n");
      out.write("\t\t\t<div id=\"");
      out.print("resource." + i);
      out.write("\" class=\"resources\">\r\n");
      out.write("                ");
 if (isResourceUpdatePending) { 
      out.write("\r\n");
      out.write("                    <a class=\"resource\" onclick=\"loadResourceData(this, true)\">Resource</a>\r\n");
      out.write("                ");
 } else { 
      out.write("\r\n");
      out.write("                    <a class=\"resource\" onclick=\"loadResourceData(this, false)\">Resource</a>\r\n");
      out.write("                ");
 } 
      out.write("\r\n");
      out.write("                ");
 if (!generateMode) { 
      out.write("\r\n");
      out.write("\t\t\t\t<div style=\"width: 100px;\" class=\"sequenceToolbar\">\r\n");
      out.write("\t\t\t\t\t<div>\r\n");
      out.write("\t\t\t\t\t\t<a class=\"deleteStyle\" onclick=\"");
      out.print("deleteResource(" + i + ")");
      out.write("\">Delete</a>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</li>\r\n");
      out.write("\t    </ul>\r\n");
      out.write("\t");
}

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
